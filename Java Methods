Java Methods with Examples:
Java methods topic in more detailed steps with real-time examples, code, and comments:

Step 1: Introduction to Methods

java

// Step 1: Introduction to Methods

public class Main {
    public static void main(String[] args) {
        // Your program starts executing from the main method
        System.out.println("Hello, this is the main method!");
        
        // Now, let's call another method
        greetUser();
    }

    // Define a simple method to greet the user
    static void greetUser() {
        // This method prints a greeting message
        System.out.println("Hello, welcome to the greetUser method!");
    }
}

Comments:

    The main method is the entry point of the program.
    The greetUser method is defined with the keyword static because it is called from a static context (main method).
    The void keyword indicates that the method does not return any value.

Step 2: Method Parameters

java

// Step 2: Method Parameters

public class Main {
    public static void main(String[] args) {
        // Call a method with parameters
        printSum(5, 3);
    }

    // Define a method with parameters
    static void printSum(int a, int b) {
        // This method takes two parameters and prints their sum
        int sum = a + b;
        System.out.println("Sum of " + a + " and " + b + " is: " + sum);
    }
}

Comments:

    The printSum method is defined to take two integer parameters (int a and int b).
    It calculates their sum and prints the result.

Step 3: Return Values

java

// Step 3: Return Values

public class Main {
    public static void main(String[] args) {
        // Call a method and store the result
        int result = addNumbers(10, 20);
        System.out.println("Result of addition: " + result);
    }

    // Define a method that returns a value
    static int addNumbers(int a, int b) {
        // This method returns the sum of two numbers
        return a + b;
    }
}

Comments:

    The addNumbers method is defined to return an integer value (the sum of two numbers).
    The result is stored in a variable and printed in the main method.

Step 4: Method Overloading

java

// Step 4: Method Overloading

public class Main {
    public static void main(String[] args) {
        printMessage("Hello");
        printMessage("Welcome", 3);
    }

    // Overloaded methods
    static void printMessage(String message) {
        // This method prints a message once
        System.out.println(message);
    }

    static void printMessage(String message, int repeatCount) {
        // This method prints a message multiple times
        for (int i = 0; i < repeatCount; i++) {
            System.out.println(message);
        }
    }
}

Comments:

    Two versions of the printMessage method are defined with different parameter lists.
    This is an example of method overloading, where the method name is the same but the parameters differ.

Step 5: Recursive Methods

java

// Step 5: Recursive Methods

public class Main {
    public static void main(String[] args) {
        int factorialResult = calculateFactorial(5);
        System.out.println("Factorial of 5: " + factorialResult);
    }

    // Recursive method to calculate factorial
    static int calculateFactorial(int n) {
        // This method calculates the factorial of a number using recursion
        if (n == 0 || n == 1) {
            return 1;
        } else {
            return n * calculateFactorial(n - 1);
        }
    }
}

Comments:

    The calculateFactorial method is defined to calculate the factorial of a number using recursion.
    It demonstrates the concept of a method calling itself.

Feel free to run these examples in a Java development environment to see the output and understand the concepts better. Adjust the code and experiment with different scenarios to deepen your understanding of Java methods.
